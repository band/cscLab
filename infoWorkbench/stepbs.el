(defun process-region ()
  (interactive)
  (let ((start (region-beginning))
        (end (region-end)))
    (save-restriction
      (narrow-to-region start end)
      (save-excursion
	(let ((line2 nil)
              (line3 nil))
	  (goto-char (point-min))
	  (forward-line 1)
	  (setq line2 (buffer-substring (point) (line-end-position)))
	  (delete-region (point) (line-end-position))
	  (forward-line 1)
	  (setq line3 (buffer-substring (point) (line-end-position)))
	  (delete-region (point) (line-end-position))
	  (goto-char end)
	  (insert line2 "\n" line3 "\n")))
      (save-excursion
	(goto-char (point-min))
	(flush-lines "^\\s-*$")
	(while (re-search-forward "\\*\\*" end t)
          (replace-match "")))
      (save-excursion
	(goto-char (point-min))
	(while (and (< (point) end) (not (eobp)))
	  (end-of-line)
	  (delete-horizontal-space t)
	  (forward-line 1)))
      (save-excursion
	(goto-char (point-min))
	(while (re-search-forward "^Year: \\([0-9]+\\)" nil t)
	  (replace-match "(\\1)")))
      (save-excursion
	(goto-char (point-min))
	(let ((line1 (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
	      (line2 (progn (forward-line 1) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))))
	  (delete-region (point-min) (progn (forward-line 1) (point)))
	  (insert (concat line1 " " line2 "\n"))))
      (save-excursion
	(goto-char (point-min))
	(while (re-search-forward "\\(Author: \\|Title: \\|Publisher: \\)" nil t)
	  (replace-match "")))
      (save-excursion
	(goto-char (point-min))
	(while (and (< (point) end) (not (eobp)))
	  (end-of-line)
	  (insert ".")
	  (forward-line 1)))
      (save-excursion
	(goto-char (point-min))
	(let ((line1 (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
	      (line2 (progn (forward-line 1) (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
	      (line3 (progn (forward-line 1) (buffer-substring-no-properties (line-beginning-position) (line-end-position)))))
	  (delete-region (point-min) (progn (forward-line 1) (point)))
	  (insert (concat line1 " " line2 " " line3 "\n"))))

      )
    )
  )
